apiVersion: v1
kind: ConfigMap
metadata:
  name: nextcloud-postgres-config
data:
  primary_init_script.sh: |
    #!/bin/bash
    set -e

    # This script assumes that the env-var $POSTGRES_MY_DB_PASSWORD contains the password of the custom user to create.
    # You can add any env-var in your Kubegres resource config YAML.

    dt=$(date '+%d/%m/%Y %H:%M:%S');
    echo "$dt - Running init script the 1st time Primary PostgreSql container is created...";

    customDatabaseName="nextcloud"
    customUserName="nextcloud"

    echo "$dt - Running: psql -v ON_ERROR_STOP=1 --username $POSTGRES_USER --dbname $POSTGRES_DB ...";

    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
    CREATE DATABASE $customDatabaseName;
    CREATE USER $customUserName WITH PASSWORD '$POSTGRES_MY_DB_PASSWORD';
    GRANT ALL PRIVILEGES ON DATABASE "$customDatabaseName" to $customUserName;
    EOSQL

    echo "$dt - Init script is completed";

  postgres.conf: |
    # Replication configs
    listen_addresses = '*'
    max_wal_senders = 10
    max_connections = 100
    shared_buffers = 128MB

    # WAL Archiving https://www.postgresql.org/docs/14/continuous-archiving.html#BACKUP-ARCHIVING-WAL
    # https://www.postgresql.org/docs/14/runtime-config-wal.html#GUC-ARCHIVE-COMMAND
    archive_command = 'test ! -f /mnt/shared/archive/%f && cp "%p" /mnt/shared/archive/%f'
    # https://www.postgresql.org/docs/14/runtime-config-wal.html#GUC-RESTORE-COMMAND
    restore_command = 'cp /mnt/shared/archive/%f "%p"'

  backup_database.sh: |
    #!/bin/bash -xe
    fileDt=$(date '+%d_%m_%Y_%H_%M_%S');
    backUpFilePath="$BACKUP_DESTINATION_FOLDER/$KUBEGRES_RESOURCE_NAME-backup-$fileDt.gz"
    pg_dump -h $BACKUP_SOURCE_DB_HOST_NAME -U postgres nextcloud | gzip > $backUpFilePath
