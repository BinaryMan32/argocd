apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: {{ .Values.project.name }}
  source:
    repoURL: {{ .Values.source.repoURL }}
    targetRevision: {{ .Values.source.targetRevision }}
    path: {{ .Values.project.path }}/kube-prometheus-stack
    helm:
      values: |
        kube-prometheus-stack:
          alertmanager:
            config:
              global:
                slack_api_url_file: /etc/alertmanager/secrets/slack-api/url
              receivers:
                - name: "null"
                - name: fbs-slack
                  slack_configs:
                    - channel: #devops
                      send_resolved: true
              # https://prometheus.io/docs/alerting/latest/configuration/#route
              route:
                group_by: ['namespace']
                group_wait: 30s
                group_interval: 5m
                repeat_interval: 2h
                receiver: fbs-slack
                routes:
                - receiver: fbs-slack
                  matchers:
                    - alertname =~ "InfoInhibitor|Watchdog"
            alertmanagerSpec:
              storage:
                volumeClaimTemplate:
                  spec:
                    storageClassName: longhorn
                    accessModes: ["ReadWriteOnce"]
                    resources:
                      requests:
                        storage: 2Gi
              secrets:
                - slack-api
            ingress:
              enabled: true
              annotations:
                cert-manager.io/cluster-issuer: intranet-ca
              hosts:
                - alertmanager.{{ .Values.domain.intranet }}
              tls:
                - hosts:
                    - alertmanager.{{ .Values.domain.intranet }}
                  secretName: alertmanager-tls
          grafana:
            admin:
              existingSecret: "grafana-login"
            persistence:
              enabled: true
              storageClassName: longhorn
              size: 2Gi
            ingress:
              enabled: true
              annotations:
                cert-manager.io/cluster-issuer: intranet-ca
              hosts:
                - grafana.{{ .Values.domain.intranet }}
              tls:
                - hosts:
                    - grafana.{{ .Values.domain.intranet }}
                  secretName: grafana-tls
          prometheus:
            prometheusSpec:
              storageSpec:
                volumeClaimTemplate:
                  spec:
                    storageClassName: longhorn
                    accessModes: ["ReadWriteOnce"]
                    resources:
                      requests:
                        storage: 50Gi
            ingress:
              enabled: true
              annotations:
                cert-manager.io/cluster-issuer: intranet-ca
              hosts:
                - prometheus.{{ .Values.domain.intranet }}
              tls:
                - hosts:
                    - prometheus.{{ .Values.domain.intranet }}
                  secretName: prometheus-tls
  destination:
    namespace: kube-prometheus-stack
    server: {{ .Values.destination.server }}
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
  ignoreDifferences:
    # failurePolicy set to Fail but switches to Ignore after deploy
    - group: admissionregistration.k8s.io
      kind: MutatingWebhookConfiguration
      name: kube-prometheus-stack-admission
      jsonPointers:
        - /webhooks/0/failurePolicy
    - group: admissionregistration.k8s.io
      kind: ValidatingWebhookConfiguration
      name: kube-prometheus-stack-admission
      jsonPointers:
        - /webhooks/0/failurePolicy
